                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.1.0 #12072 (Mac OS X ppc)
                                      4 ;--------------------------------------------------------
                                      5 	.module hal
                                      6 	.optsdcc -mz80
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _msx_wait
                                     12 	.globl _printf
                                     13 	.globl _hal_init
                                     14 	.globl _delay_ms
                                     15 	.globl _write_command
                                     16 	.globl _write_data
                                     17 	.globl _read_data
                                     18 	.globl _read_status
                                     19 	.globl _error
                                     20 	.globl _putchar
                                     21 	.globl _getchar
                                     22 	.globl _read_data_multiple
                                     23 	.globl _write_data_multiple
                                     24 ;--------------------------------------------------------
                                     25 ; special function registers
                                     26 ;--------------------------------------------------------
                                     27 ;--------------------------------------------------------
                                     28 ; ram data
                                     29 ;--------------------------------------------------------
                                     30 	.area _DATA
                                     31 ;--------------------------------------------------------
                                     32 ; ram data
                                     33 ;--------------------------------------------------------
                                     34 	.area _INITIALIZED
                                     35 ;--------------------------------------------------------
                                     36 ; absolute external ram data
                                     37 ;--------------------------------------------------------
                                     38 	.area _DABS (ABS)
                                     39 ;--------------------------------------------------------
                                     40 ; global & static initialisations
                                     41 ;--------------------------------------------------------
                                     42 	.area _HOME
                                     43 	.area _GSINIT
                                     44 	.area _GSFINAL
                                     45 	.area _GSINIT
                                     46 ;--------------------------------------------------------
                                     47 ; Home
                                     48 ;--------------------------------------------------------
                                     49 	.area _HOME
                                     50 	.area _HOME
                                     51 ;--------------------------------------------------------
                                     52 ; code
                                     53 ;--------------------------------------------------------
                                     54 	.area _CODE
                                     55 ;hal.c:7: void hal_init ()
                                     56 ;	---------------------------------
                                     57 ; Function hal_init
                                     58 ; ---------------------------------
      000000                         59 _hal_init::
                                     60 ;hal.c:10: }
      000000 C9               [10]   61 	ret
                                     62 ;hal.c:13: void msx_wait (uint16_t times_jiffy)  __z88dk_fastcall __naked
                                     63 ;	---------------------------------
                                     64 ; Function msx_wait
                                     65 ; ---------------------------------
      000001                         66 _msx_wait::
                                     67 ;hal.c:28: __endasm; 
      000001 FB               [ 4]   68 	ei
                                     69 ;	Wait a determined number of interrupts
                                     70 ;	Input: BC = number of 1/framerate interrupts to wait
                                     71 ;	Output: (none)
      000002                         72 	    WAIT:
      000002 76               [ 4]   73 	halt	; waits 1/50th or 1/60th of a second till next interrupt
      000003 2B               [ 6]   74 	dec	hl
      000004 7C               [ 4]   75 	ld	a,h
      000005 B5               [ 4]   76 	or	l
      000006 20 FA            [12]   77 	jr	nz, WAIT
      000008 C9               [10]   78 	ret
                                     79 ;hal.c:29: }
                                     80 ;hal.c:31: void delay_ms (uint16_t milliseconds)
                                     81 ;	---------------------------------
                                     82 ; Function delay_ms
                                     83 ; ---------------------------------
      000009                         84 _delay_ms::
                                     85 ;hal.c:33: msx_wait (milliseconds/20);
      000009 D1               [10]   86 	pop	de
      00000A C1               [10]   87 	pop	bc
      00000B C5               [11]   88 	push	bc
      00000C D5               [11]   89 	push	de
      00000D 21 14 00         [10]   90 	ld	hl, #0x0014
      000010 E5               [11]   91 	push	hl
      000011 C5               [11]   92 	push	bc
      000012 CDr00r00         [17]   93 	call	__divuint
      000015 F1               [10]   94 	pop	af
      000016 F1               [10]   95 	pop	af
                                     96 ;hal.c:34: }
      000017 C3r01r00         [10]   97 	jp	_msx_wait
                                     98 ;hal.c:36: void write_command (uint8_t command)  __z88dk_fastcall __naked
                                     99 ;	---------------------------------
                                    100 ; Function write_command
                                    101 ; ---------------------------------
      00001A                        102 _write_command::
                                    103 ;hal.c:42: __endasm;
      00001A 7D               [ 4]  104 	ld	a,l
      00001B D3 11            [11]  105 	out	(#0x11),a
      00001D C9               [10]  106 	ret
                                    107 ;hal.c:43: }
                                    108 ;hal.c:44: void write_data (uint8_t data)  __z88dk_fastcall __naked
                                    109 ;	---------------------------------
                                    110 ; Function write_data
                                    111 ; ---------------------------------
      00001E                        112 _write_data::
                                    113 ;hal.c:50: __endasm;
      00001E 7D               [ 4]  114 	ld	a,l
      00001F D3 10            [11]  115 	out	(#0x10),a
      000021 C9               [10]  116 	ret
                                    117 ;hal.c:51: }
                                    118 ;hal.c:52: uint8_t read_data ()  __z88dk_fastcall __naked
                                    119 ;	---------------------------------
                                    120 ; Function read_data
                                    121 ; ---------------------------------
      000022                        122 _read_data::
                                    123 ;hal.c:58: __endasm;
      000022 DB 10            [11]  124 	in	a,(#0x10)
      000024 6F               [ 4]  125 	ld	l,a
      000025 C9               [10]  126 	ret
                                    127 ;hal.c:59: }
                                    128 ;hal.c:60: uint8_t read_status ()  __z88dk_fastcall __naked
                                    129 ;	---------------------------------
                                    130 ; Function read_status
                                    131 ; ---------------------------------
      000026                        132 _read_status::
                                    133 ;hal.c:66: __endasm;
      000026 DB 11            [11]  134 	in	a,(#0x11)
      000028 6F               [ 4]  135 	ld	l,a
      000029 C9               [10]  136 	ret
                                    137 ;hal.c:67: }
                                    138 ;hal.c:69: void error (char* txt)
                                    139 ;	---------------------------------
                                    140 ; Function error
                                    141 ; ---------------------------------
      00002A                        142 _error::
                                    143 ;hal.c:71: printf (txt);
      00002A C1               [10]  144 	pop	bc
      00002B E1               [10]  145 	pop	hl
      00002C E5               [11]  146 	push	hl
      00002D C5               [11]  147 	push	bc
      00002E E5               [11]  148 	push	hl
      00002F CDr00r00         [17]  149 	call	_printf
      000032 F1               [10]  150 	pop	af
                                    151 ;hal.c:75: __endasm;
      000033 F3               [ 4]  152 	di
      000034 76               [ 4]  153 	halt
                                    154 ;hal.c:76: }
      000035 C9               [10]  155 	ret
                                    156 ;hal.c:78: int putchar (int character)
                                    157 ;	---------------------------------
                                    158 ; Function putchar
                                    159 ; ---------------------------------
      000036                        160 _putchar::
                                    161 ;hal.c:90: __endasm;
      000036 21 02 00         [10]  162 	ld	hl, #2
      000039 39               [11]  163 	add	hl, sp ;Bypass the return address of the function
      00003A 7E               [ 7]  164 	ld	a, (hl)
      00003B FD 2A C0 FC      [20]  165 	ld	iy,(#0xfcc1 -1) ;BIOS slot in iyh
      00003F DD E5            [15]  166 	push	ix
      000041 DD 21 A2 00      [14]  167 	ld	ix,#0x00a2 ;address of BIOS routine
      000045 CD 1C 00         [17]  168 	call	0x001c ;interslot call
      000048 DD E1            [14]  169 	pop	ix
                                    170 ;hal.c:92: return character;
      00004A 21 02 00         [10]  171 	ld	hl, #2
      00004D 39               [11]  172 	add	hl, sp
      00004E 7E               [ 7]  173 	ld	a, (hl)
      00004F 23               [ 6]  174 	inc	hl
      000050 66               [ 7]  175 	ld	h, (hl)
      000051 6F               [ 4]  176 	ld	l, a
                                    177 ;hal.c:93: }
      000052 C9               [10]  178 	ret
                                    179 ;hal.c:95: int getchar ()
                                    180 ;	---------------------------------
                                    181 ; Function getchar
                                    182 ; ---------------------------------
      000053                        183 _getchar::
                                    184 ;hal.c:113: __endasm;
      000053                        185 	_get_char_again:
                                    186 ;ld	iy,(#0xfcc1 -1) ;BIOS slot in iyh
                                    187 ;push	ix
                                    188 ;ld	ix,#0x009c ;address of BIOS routine
                                    189 ;call	0x001c ;interslot call
                                    190 ;pop	ix
                                    191 ;jr	z, _get_char_again
      000053 FD 2A C0 FC      [20]  192 	ld	iy,(#0xfcc1 -1) ;BIOS slot in iyh
      000057 DD E5            [15]  193 	push	ix
      000059 DD 21 9F 00      [14]  194 	ld	ix,#0x009f ;address of BIOS routine
      00005D CD 1C 00         [17]  195 	call	0x001c ;interslot call
      000060 DD E1            [14]  196 	pop	ix
      000062 6F               [ 4]  197 	ld	l,a
                                    198 ;hal.c:114: }
      000063 C9               [10]  199 	ret
                                    200 ;hal.c:116: void  read_data_multiple (uint8_t* buffer,uint8_t len)
                                    201 ;	---------------------------------
                                    202 ; Function read_data_multiple
                                    203 ; ---------------------------------
      000064                        204 _read_data_multiple::
                                    205 ;hal.c:119: uint8_t* ptr=buffer;
      000064 D1               [10]  206 	pop	de
      000065 C1               [10]  207 	pop	bc
      000066 C5               [11]  208 	push	bc
      000067 D5               [11]  209 	push	de
                                    210 ;hal.c:120: for (cnt=0;cnt<len;cnt++)
      000068 1E 00            [ 7]  211 	ld	e, #0x00
      00006A                        212 00103$:
      00006A 21 04 00         [10]  213 	ld	hl, #4
      00006D 39               [11]  214 	add	hl, sp
      00006E 7B               [ 4]  215 	ld	a, e
      00006F 96               [ 7]  216 	sub	a, (hl)
      000070 D0               [11]  217 	ret	NC
                                    218 ;hal.c:121: *(ptr++) = read_data();
      000071 C5               [11]  219 	push	bc
      000072 D5               [11]  220 	push	de
      000073 CDr22r00         [17]  221 	call	_read_data
      000076 7D               [ 4]  222 	ld	a, l
      000077 D1               [10]  223 	pop	de
      000078 C1               [10]  224 	pop	bc
      000079 02               [ 7]  225 	ld	(bc), a
      00007A 03               [ 6]  226 	inc	bc
                                    227 ;hal.c:120: for (cnt=0;cnt<len;cnt++)
      00007B 1C               [ 4]  228 	inc	e
                                    229 ;hal.c:122: }
      00007C 18 EC            [12]  230 	jr	00103$
                                    231 ;hal.c:123: void    write_data_multiple (uint8_t* buffer,uint8_t len)
                                    232 ;	---------------------------------
                                    233 ; Function write_data_multiple
                                    234 ; ---------------------------------
      00007E                        235 _write_data_multiple::
                                    236 ;hal.c:126: uint8_t* ptr=buffer;
      00007E D1               [10]  237 	pop	de
      00007F C1               [10]  238 	pop	bc
      000080 C5               [11]  239 	push	bc
      000081 D5               [11]  240 	push	de
                                    241 ;hal.c:127: for (cnt=0;cnt<len;cnt++)
      000082 1E 00            [ 7]  242 	ld	e, #0x00
      000084                        243 00103$:
      000084 21 04 00         [10]  244 	ld	hl, #4
      000087 39               [11]  245 	add	hl, sp
      000088 7B               [ 4]  246 	ld	a, e
      000089 96               [ 7]  247 	sub	a, (hl)
      00008A D0               [11]  248 	ret	NC
                                    249 ;hal.c:128: write_data(*(ptr++));
      00008B 0A               [ 7]  250 	ld	a, (bc)
      00008C 6F               [ 4]  251 	ld	l, a
      00008D 03               [ 6]  252 	inc	bc
      00008E C5               [11]  253 	push	bc
      00008F D5               [11]  254 	push	de
      000090 CDr1Er00         [17]  255 	call	_write_data
      000093 D1               [10]  256 	pop	de
      000094 C1               [10]  257 	pop	bc
                                    258 ;hal.c:127: for (cnt=0;cnt<len;cnt++)
      000095 1C               [ 4]  259 	inc	e
                                    260 ;hal.c:129: }
      000096 18 EC            [12]  261 	jr	00103$
                                    262 	.area _CODE
                                    263 	.area _INITIALIZER
                                    264 	.area _CABS (ABS)
